import numpy as np
from numpy.random import rand
import matplotlib.pyplot as plt

def init_lattice(N):
    lattice = np.random.choice([1, -1], size = (N,N))
    print(lattice)
    return lattice

def initialstate(N):
    state = 2*np.random.randint(2, size = (N,N))-1
    print(state)
    return state

def delta_energy(lattice_config):
    energy = 0
    LC = lattice_config
    N = len(config)

    for i in range(N):
        for j in range(N):
            S = LC[i,j]
            nb = LC[(i + 1)%N, j] + LC[(i-1)%N, j] + LC[i, (j+1)%N] + LC[i, (j-1)%N]

            energy += -nb * S

    return energy/4

def mc_move(lattice_config, beta):

    LC = lattice_config

    for _ in range(N**2):
        i = np.random.randint(0, N)
        j = np.random.randint(0, N)
        S =  LC[i,j]

        nb = LC[(i + 1)%N, j] + LC[(i-1)%N, j] + LC[i, (j+1)%N] + LC[i, (j-1)%N]

        energy = 2*S*nb

        if energy < 0:
            S = S * (-1)
        elif rand() < np.exp(-energy * beta):
            S = S * (-1)

        LC[i, j] = S

    return LC

def magnetization(LC):
    return np.sum(LC)

N = 10

T = 0.5

beta = 1/T

def ising(time_steps):

    LC = init_lattice(N)

    M_array = np.zeros(time_steps)

    for i in range(0, time_steps):
        move = mc_move(LC, beta)
        M = magnetization(LC)
        M_array[i] = M

    return M_array

time_steps = 1000

M_array = ising(time_steps)

plt.plot(np.arange(0,time_steps,1), M_array)
plt.show()
